generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model course {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @db.VarChar(255)
  description String?   @db.VarChar(255)
  start_date  DateTime  @db.Date
  end_date    DateTime  @db.Date
  term_id     String    @db.Uuid
  faculty_id  String    @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  faculty     faculty   @relation(fields: [faculty_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  term        term      @relation(fields: [term_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  student     student[]
}

model faculty {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(255)
  department  String   @db.VarChar(255)
  designation String   @db.VarChar(255)
  user_id     String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  course      course[]
  user        user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model student {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String   @db.VarChar(255)
  admission_date DateTime @db.Date
  course_id      String   @db.Uuid
  term_id        String   @db.Uuid
  user_id        String   @db.Uuid
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  course         course   @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  term           term     @relation(fields: [term_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user           user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model term {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String     @db.VarChar(255)
  start_date    DateTime   @db.Date
  end_date      DateTime   @db.Date
  is_active     Boolean
  university_id String     @db.Uuid
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  course        course[]
  student       student[]
  university    university @relation(fields: [university_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model university {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  term        term[]
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String       @unique @db.VarChar(255)
  firstName   String?      @db.VarChar(255)
  lastName    String?      @db.VarChar(255)
  roq_user_id String       @db.VarChar(255)
  tenant_id   String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  faculty     faculty[]
  student     student[]
  university  university[]
}
